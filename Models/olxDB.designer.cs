#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace olxProject.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="olxDB")]
	public partial class olxDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAd(Ad instance);
    partial void UpdateAd(Ad instance);
    partial void DeleteAd(Ad instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategoryDetail(CategoryDetail instance);
    partial void UpdateCategoryDetail(CategoryDetail instance);
    partial void DeleteCategoryDetail(CategoryDetail instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertAdsCategoryDetail(AdsCategoryDetail instance);
    partial void UpdateAdsCategoryDetail(AdsCategoryDetail instance);
    partial void DeleteAdsCategoryDetail(AdsCategoryDetail instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public olxDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["olxDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public olxDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public olxDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public olxDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public olxDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ad> Ads
		{
			get
			{
				return this.GetTable<Ad>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategoryDetail> CategoryDetails
		{
			get
			{
				return this.GetTable<CategoryDetail>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<AdsCategoryDetail> AdsCategoryDetails
		{
			get
			{
				return this.GetTable<AdsCategoryDetail>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ads")]
	public partial class Ad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdId;
		
		private string _Title;
		
		private string _Description;
		
		private decimal _Price_Salary;
		
		private int _LocationId;
		
		private int _UserId;
		
		private System.DateTime _PublishDate;
		
		private bool _IsApproved;
		
		private int _CatId;
		
		private int _ViewsCount;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<AdsCategoryDetail> _AdsCategoryDetails;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdIdChanging(int value);
    partial void OnAdIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPrice_SalaryChanging(decimal value);
    partial void OnPrice_SalaryChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPublishDateChanging(System.DateTime value);
    partial void OnPublishDateChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnCatIdChanging(int value);
    partial void OnCatIdChanged();
    partial void OnViewsCountChanging(int value);
    partial void OnViewsCountChanged();
    #endregion
		
		public Ad()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._AdsCategoryDetails = new EntitySet<AdsCategoryDetail>(new Action<AdsCategoryDetail>(this.attach_AdsCategoryDetails), new Action<AdsCategoryDetail>(this.detach_AdsCategoryDetails));
			this._Category = default(EntityRef<Category>);
			this._Location = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdId
		{
			get
			{
				return this._AdId;
			}
			set
			{
				if ((this._AdId != value))
				{
					this.OnAdIdChanging(value);
					this.SendPropertyChanging();
					this._AdId = value;
					this.SendPropertyChanged("AdId");
					this.OnAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price_Salary", DbType="Decimal(8,2) NOT NULL")]
		public decimal Price_Salary
		{
			get
			{
				return this._Price_Salary;
			}
			set
			{
				if ((this._Price_Salary != value))
				{
					this.OnPrice_SalaryChanging(value);
					this.SendPropertyChanging();
					this._Price_Salary = value;
					this.SendPropertyChanged("Price_Salary");
					this.OnPrice_SalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="Date NOT NULL")]
		public System.DateTime PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", DbType="Int NOT NULL")]
		public int CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewsCount", DbType="Int NOT NULL")]
		public int ViewsCount
		{
			get
			{
				return this._ViewsCount;
			}
			set
			{
				if ((this._ViewsCount != value))
				{
					this.OnViewsCountChanging(value);
					this.SendPropertyChanging();
					this._ViewsCount = value;
					this.SendPropertyChanged("ViewsCount");
					this.OnViewsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Image", Storage="_Images", ThisKey="AdId", OtherKey="adId")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Message", Storage="_Messages", ThisKey="AdId", OtherKey="adId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_AdsCategoryDetail", Storage="_AdsCategoryDetails", ThisKey="AdId", OtherKey="AdId")]
		public EntitySet<AdsCategoryDetail> AdsCategoryDetails
		{
			get
			{
				return this._AdsCategoryDetails;
			}
			set
			{
				this._AdsCategoryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ad", Storage="_Category", ThisKey="CatId", OtherKey="CatID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._CatId = value.CatID;
					}
					else
					{
						this._CatId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Ad", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ad", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
		
		private void attach_AdsCategoryDetails(AdsCategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_AdsCategoryDetails(AdsCategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatID;
		
		private string _CatName;
		
		private EntitySet<Ad> _Ads;
		
		private EntitySet<CategoryDetail> _CategoryDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    #endregion
		
		public Category()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			this._CategoryDetails = new EntitySet<CategoryDetail>(new Action<CategoryDetail>(this.attach_CategoryDetails), new Action<CategoryDetail>(this.detach_CategoryDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CatName
		{
			get
			{
				return this._CatName;
			}
			set
			{
				if ((this._CatName != value))
				{
					this.OnCatNameChanging(value);
					this.SendPropertyChanging();
					this._CatName = value;
					this.SendPropertyChanged("CatName");
					this.OnCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ad", Storage="_Ads", ThisKey="CatID", OtherKey="CatId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryDetail", Storage="_CategoryDetails", ThisKey="CatID", OtherKey="Catid")]
		public EntitySet<CategoryDetail> CategoryDetails
		{
			get
			{
				return this._CategoryDetails;
			}
			set
			{
				this._CategoryDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_CategoryDetails(CategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryDetails(CategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryDetails")]
	public partial class CategoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private string _DetailName;
		
		private int _Catid;
		
		private EntitySet<AdsCategoryDetail> _AdsCategoryDetails;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnDetailNameChanging(string value);
    partial void OnDetailNameChanged();
    partial void OnCatidChanging(int value);
    partial void OnCatidChanged();
    #endregion
		
		public CategoryDetail()
		{
			this._AdsCategoryDetails = new EntitySet<AdsCategoryDetail>(new Action<AdsCategoryDetail>(this.attach_AdsCategoryDetails), new Action<AdsCategoryDetail>(this.detach_AdsCategoryDetails));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DetailName
		{
			get
			{
				return this._DetailName;
			}
			set
			{
				if ((this._DetailName != value))
				{
					this.OnDetailNameChanging(value);
					this.SendPropertyChanging();
					this._DetailName = value;
					this.SendPropertyChanged("DetailName");
					this.OnDetailNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catid", DbType="Int NOT NULL")]
		public int Catid
		{
			get
			{
				return this._Catid;
			}
			set
			{
				if ((this._Catid != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatidChanging(value);
					this.SendPropertyChanging();
					this._Catid = value;
					this.SendPropertyChanged("Catid");
					this.OnCatidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_AdsCategoryDetail", Storage="_AdsCategoryDetails", ThisKey="DetailId", OtherKey="DetailId")]
		public EntitySet<AdsCategoryDetail> AdsCategoryDetails
		{
			get
			{
				return this._AdsCategoryDetails;
			}
			set
			{
				this._AdsCategoryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryDetail", Storage="_Category", ThisKey="Catid", OtherKey="CatID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryDetails.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryDetails.Add(this);
						this._Catid = value.CatID;
					}
					else
					{
						this._Catid = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdsCategoryDetails(AdsCategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = this;
		}
		
		private void detach_AdsCategoryDetails(AdsCategoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private string _imgurl;
		
		private int _adId;
		
		private EntityRef<Ad> _Ad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnimgurlChanging(string value);
    partial void OnimgurlChanged();
    partial void OnadIdChanging(int value);
    partial void OnadIdChanged();
    #endregion
		
		public Image()
		{
			this._Ad = default(EntityRef<Ad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgurl", DbType="NVarChar(150)")]
		public string imgurl
		{
			get
			{
				return this._imgurl;
			}
			set
			{
				if ((this._imgurl != value))
				{
					this.OnimgurlChanging(value);
					this.SendPropertyChanging();
					this._imgurl = value;
					this.SendPropertyChanged("imgurl");
					this.OnimgurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adId", DbType="Int NOT NULL")]
		public int adId
		{
			get
			{
				return this._adId;
			}
			set
			{
				if ((this._adId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnadIdChanging(value);
					this.SendPropertyChanging();
					this._adId = value;
					this.SendPropertyChanged("adId");
					this.OnadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Image", Storage="_Ad", ThisKey="adId", OtherKey="AdId", IsForeignKey=true)]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._adId = value.AdId;
					}
					else
					{
						this._adId = default(int);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _LocationName;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    #endregion
		
		public Location()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Ad", Storage="_Ads", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _msgId;
		
		private int _adId;
		
		private string _SenderEmail;
		
		private string _msgBody;
		
		private EntityRef<Ad> _Ad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmsgIdChanging(int value);
    partial void OnmsgIdChanged();
    partial void OnadIdChanging(int value);
    partial void OnadIdChanged();
    partial void OnSenderEmailChanging(string value);
    partial void OnSenderEmailChanged();
    partial void OnmsgBodyChanging(string value);
    partial void OnmsgBodyChanged();
    #endregion
		
		public Message()
		{
			this._Ad = default(EntityRef<Ad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int msgId
		{
			get
			{
				return this._msgId;
			}
			set
			{
				if ((this._msgId != value))
				{
					this.OnmsgIdChanging(value);
					this.SendPropertyChanging();
					this._msgId = value;
					this.SendPropertyChanged("msgId");
					this.OnmsgIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adId", DbType="Int NOT NULL")]
		public int adId
		{
			get
			{
				return this._adId;
			}
			set
			{
				if ((this._adId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnadIdChanging(value);
					this.SendPropertyChanging();
					this._adId = value;
					this.SendPropertyChanged("adId");
					this.OnadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SenderEmail
		{
			get
			{
				return this._SenderEmail;
			}
			set
			{
				if ((this._SenderEmail != value))
				{
					this.OnSenderEmailChanging(value);
					this.SendPropertyChanging();
					this._SenderEmail = value;
					this.SendPropertyChanged("SenderEmail");
					this.OnSenderEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgBody", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string msgBody
		{
			get
			{
				return this._msgBody;
			}
			set
			{
				if ((this._msgBody != value))
				{
					this.OnmsgBodyChanging(value);
					this.SendPropertyChanging();
					this._msgBody = value;
					this.SendPropertyChanged("msgBody");
					this.OnmsgBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Message", Storage="_Ad", ThisKey="adId", OtherKey="AdId", IsForeignKey=true)]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._adId = value.AdId;
					}
					else
					{
						this._adId = default(int);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdsCategoryDetails")]
	public partial class AdsCategoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdId;
		
		private int _DetailId;
		
		private string _Value;
		
		private int _RecordId;
		
		private EntityRef<Ad> _Ad;
		
		private EntityRef<CategoryDetail> _CategoryDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdIdChanging(int value);
    partial void OnAdIdChanged();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    #endregion
		
		public AdsCategoryDetail()
		{
			this._Ad = default(EntityRef<Ad>);
			this._CategoryDetail = default(EntityRef<CategoryDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdId", DbType="Int NOT NULL")]
		public int AdId
		{
			get
			{
				return this._AdId;
			}
			set
			{
				if ((this._AdId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdIdChanging(value);
					this.SendPropertyChanging();
					this._AdId = value;
					this.SendPropertyChanged("AdId");
					this.OnAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", DbType="Int NOT NULL")]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					if (this._CategoryDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_AdsCategoryDetail", Storage="_Ad", ThisKey="AdId", OtherKey="AdId", IsForeignKey=true)]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.AdsCategoryDetails.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.AdsCategoryDetails.Add(this);
						this._AdId = value.AdId;
					}
					else
					{
						this._AdId = default(int);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_AdsCategoryDetail", Storage="_CategoryDetail", ThisKey="DetailId", OtherKey="DetailId", IsForeignKey=true)]
		public CategoryDetail CategoryDetail
		{
			get
			{
				return this._CategoryDetail.Entity;
			}
			set
			{
				CategoryDetail previousValue = this._CategoryDetail.Entity;
				if (((previousValue != value) 
							|| (this._CategoryDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryDetail.Entity = null;
						previousValue.AdsCategoryDetails.Remove(this);
					}
					this._CategoryDetail.Entity = value;
					if ((value != null))
					{
						value.AdsCategoryDetails.Add(this);
						this._DetailId = value.DetailId;
					}
					else
					{
						this._DetailId = default(int);
					}
					this.SendPropertyChanged("CategoryDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private string _Mobile;
		
		private int _RoleId;
		
		private EntitySet<Ad> _Ads;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public User()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ad", Storage="_Ads", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
